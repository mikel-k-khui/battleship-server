const path = require('path');
const express = require('express');
const app = express();
const server = require('http').createServer(app);
const io = require('socket.io')(server);
const favicon = require('serve-favicon');

//server settings
const ENV = process.env.NODE_ENV || 'development';
const PORT = process.env.PORT || 8001;

//socket management
// const api_id = {};
const playerList = {};

// Game logics
const { initGameBoards } = require('./board');
const { getAShot, getShotsArray } = require('./shots');
const { updateOpponent, updatePlayer, updateShot } = require('./update');

app.use(express.static(path.join(__dirname, '../public')));
app.use(favicon(path.join(__dirname, '../public', 'favicon.ico')));

app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, '../public/index.html'));
  // console.log("In API server.");
});

const socket = io.on('connect', socket => {
  console.log(new Date().toISOString() + ' ID ' + socket.id);
  let gameState = {};
  let randomShots = {};
  let knownShots = {};
  let level = 'EASY';

  /* Player socket listenrs and logic calls */
  socket.on('player', (socketId, lev, cb) => {
    //check socketID = socket.id
    playerList[socket.id] = {
      player_id: socket.id,
      boards: null,
      ships: null,
      turn: null
    };
    level = lev;

    gameState = initGameBoards(socket.id);

    ({ randomShots, knownShots, ...rest } = getShotsArray(gameState));
    console.log(
      "Confirmed player from client with game as ",
      gameState.ships.own
    );

    //send gameState with players' board, players' boats,
    cb({
      serverId: socket.id,
      clientId: socketId,
      gameState,
      rest
    });
  });

  socket.on('gameFeed', (hit, cb) => {
    // console.log('Received new gameState from client in server:', hit);
    updateOpponent(hit, gameState);

    if (gameState.endGame.gameOver === false ) {
      //determine shot by level
      const shotOnPlayer = getAShot(gameState, level, knownShots, randomShots);

      updatePlayer(shotOnPlayer, gameState);

      updateShot(shotOnPlayer, gameState);

      // console.log(
      //   `Before call `,
      //   gameState.turn,
      //   '\nplayer:\n',
      //   gameState.shots.own,
      //   '\nopponent/server\n',
      //   gameState.shots.opponent
      // );
    }

    cb({ gameState });
  });

  /* listener only for API only */
  // socket.on('api', (feed) => {
  //   api_id['api'] = feed;
  // });

  socket.on('shotFeed', (feed, cb) => {
    // console.log('Before send shot:', feed);
    sendShot(feed, socket);

    // console.log('Received feed from test page in server:', feed);
    cb('sample');
  });

  socket.on('disconnect', feed => {
    gameState = {};
    randomShots = {};
    knownShots = {};
    level = 'EASY';
    console.log('Disconnected:', feed, " @", new Date().toISOString());
  });

}); // end of io.on wrapping all socket listeners

/**
 * Render an array of appointments
 * @target {Object as {row: col}} the board tile generated by the game
 * @aSocket {string} socket of the player.
 * @return [callback fn(data from io.on in client(s))]
 */
// const sendShot = function(target, aSocket) {
//   socket.emit('serverFeed', target);
// };

server.listen(PORT, () => {
  console.log(`Listening on port ${PORT} in ${ENV} mode.`);
});
