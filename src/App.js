const path = require('path');
const express = require('express');
const app = express();  
const server = require('http').createServer(app);
const io = require('socket.io')(server);

//server settings
const ENV = process.env.NODE_ENV || "development"; 
const PORT = process.env.PORT || 8001;

//socket management
// const api_id = {};
const playerList = {};

// Game logics
const { initGameBoards } = require('./board');
const { getAShot, getShotsArray } = require('./shots');
const { updateOpponent, updatePlayer } = require('./update');

app.use(express.static(path.join(__dirname, '../public')));

// app.get('/', function (req, res) {
//   res.sendFile(path.join(__dirname, '../index.html'));
//   console.log("In API server.");
// });

const socket = io.on('connect', (socket) => {

  console.log((new Date().toISOString()) + ' ID ' + socket.id);
  let gameState = {};
  let randomShots = {};
  let knownShots = {};
  let level = 'EASY';

  /* Player socket listenrs and logic calls */
  socket.on('player', (socketId, cb) => {
    //check socketID = socket.id
    playerList[socket.id] = {
      player_id: socket.id,
      boards: null,
      ships: null,
      turn: null
    };
    gameState = initGameBoards(socket.id);

    ({ randomShots, knownShots, ...rest } = getShotsArray(gameState));
    console.log("Confirmed player from client in server's id:", socket.id, " with game as ", gameState, " and shots:", randomShots);

    //send gameState with players' board, players' boats, 
    cb({ serverId: socket.id, clientId: socketId, gameState, randomShots, knownShots, rest });
  });

  socket.on('gameFeed', (hit, cb) => {
    console.log("Received new gameState from client in server:", hit);
    updateOpponent(hit, gameState, knownShots, randomShots);

    //determine shot by level
    shotOnPlayer = getAShot(gameState);

    updatePlayer(shotOnPlayer, gameState, knownShots, randomShots)


    console.log(`Before call `, gameState.gameState.turn, "\nplayer:\n", gameState.gameState.shots.own, "\nopponent/server\n", gameState.gameState.shots.opponent);

    cb({ gameState });
  });

  /* listener only for API only */
  // socket.on('api', (feed) => {
  //   api_id['api'] = feed;
  // });

  socket.on('shotFeed', (feed, cb) => {
    console.log("Before send shot:", feed);
    sendShot(feed, socket);
    console.log("Received feed from test page in server:", feed);
    cb('sample');
  });


}); // end of io.on wrapping all socket listeners

/**
 * Render an array of appointments
 * @target {Object as {row: col}} the board tile generated by the game
 * @aSocket {string} socket of the player.
 * @return [callback fn(data from io.on in client(s))]
 */
function sendShot(target, aSocket) {
  socket.emit('serverFeed', target);
  console.log("Sent to", socket.id);
  // io.to('aSocket').emit('serverFeed', target, (ack) => {
  //   console.log("Does emit has a callback?", ack);
  // });
};

server.listen(PORT, () => {
  console.log(`Listening on port ${PORT} in ${ENV} mode.`);
});